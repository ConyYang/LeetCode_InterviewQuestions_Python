
红黑树
每个节点非红即黑；
根节点总是黑色的；
每个叶子节点都是黑色的空节点（NIL节点）；
如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；
从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。


平衡二叉树 是一棵二叉排序树，且具有以下性质：
可以是一棵空树
如果不是空树，它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。
平衡二叉树的常用实现方法有 红黑树、AVL 树、替罪羊树、加权平衡树、伸展树 等。


----------------------------------------------------------------------------------------
字典树，又称单词查找树，Trie 树，是一种树形结构，是一种哈希树的变种。
典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），
所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，
最大限度地减少无谓的字符串比较，查询效率比哈希树高。

字典树的主要性质
它有 3 个基本性质：

根节点不包含字符，除根节点外每一个节点都只包含一个字符；
从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串；
每个节点的所有子节点包含的字符都不相同。


堆 (heap) 是一种经过排序的完全二叉树，其中任一非叶子节点的值均不大于（或不小于）其左孩子和右孩子节点的值。

堆，又被为优先队列(priority queue)。尽管名为优先队列，但堆并不是队列。

其他概念解释
最大堆 根结点的键值是所有堆结点键值中最大者。

最小堆 根结点的键值是所有堆结点键值中最小者。

----------------------------------------------------------------------------------------


概念介绍
无向图 图是若干个顶点(Vertices)和边(Edges)相互连接组成的。边仅由两个顶点连接，并且没有方向的图称为无向图。

有向图 在有向图中，边是单向的：每条边连接的两个顶点都是一个有序对，它们的邻接性是单向的。我们开发过程中碰到的很多场景都是有向图：
比如任务调度的依赖关系，社交网络的任务关系等等都是天然的有向图。

度 一个顶点的度是指与该顶点相关联的边的条数，顶点 v 的度记作 d(v)。


表示图通常有四种方法：数组表示法、邻接表、十字链表和邻接多重表。邻接表是图的一种链式存储结构，
十字链表是有向图的另一种链式存储结构，邻接多重表是无向图的另一种链式存储结构。这里主要讲解一下邻接表的表示和实现，
邻接表中有两种结点，一种是头结点，另一种是表结点，头结点中存储一个顶点的数据和指向链表中第一个结点，
表结点中存储当前顶点在图中的位置和指向下一条边或弧的结点，表头结点用链式或顺序结构方式存储，如下图所示就是上图 G2 无向图的邻接表表示。

----------------------------------------------------------------------------------------
深度优先搜索(DFS) 是树的先根遍历的推广，它的基本思想是：
从根节点出发，沿着左子树方向进行纵向遍历，直到找到叶子节点为止。
然后回溯到前一个节点，进行右子树节点的遍历，直到遍历完所有可达节点为止。

----------------------------------------------------------------------------------------
广度优先搜索(BFS)是树的按层次遍历的推广，它的基本思想是：
首先访问初始点 vi，并将其标记为已访问过，接着访问 vi 的所有未被访问过的邻接点 vi1,vi2,..., vin，
并均标记已访问过，然后再按照 vi1,vi2,..., vin 的次序，访问每一个顶点的所有未被访问过的邻接点，
并均标记为已访问过，依次类推，直到图中所有和初始点 vi 有路径相通的顶点都被访问过为止。